{"version":3,"sources":["views/apps/report/PayoutList.js"],"names":["i","PayoutList","state","rowData","paginationPageSize","currenPageSize","getPageSize","defaultColDef","sortable","editable","resizable","suppressMenu","columnDefs","headerName","valueGetter","field","width","filter","cellRendererFramework","params","className","render","history","size","color","onClick","push","data","_id","selectedData","gridApi","getSelectedRows","runthisfunction","updateRowData","remove","transactionId","console","log","status","style","reqsted_amt","astroId","ownamount","fullname","mobile","updatedAt","split","id","axiosConfig","get","then","res","catch","err","onGridReady","api","gridColumnApi","columnApi","setState","paginationGetCurrentPage","paginationGetPageSize","totalPages","paginationGetTotalPages","updateSearchQuery","val","setQuickFilter","filterSize","paginationSetPageSize","Number","response","this","breadCrumbTitle","breadCrumbParent","breadCrumbActive","sm","tag","length","right","placeholder","onChange","e","target","value","Ripple","exportDataAsCsv","Consumer","context","gridOptions","rowSelection","colResizeDefault","animateRows","floatingFilter","pagination","pivotPanelShow","enableRtl","direction","React","Component"],"mappings":"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","file":"static/js/297.5b4ec5db.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Button,\r\n  UncontrolledDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n} from \"reactstrap\";\r\n// import axiosConfig from \"../../../axiosConfig\";\r\nimport axios from \"axios\";\r\nimport { ContextLayout } from \"../../../utility/context/Layout\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport { Eye, Edit, Trash2, ChevronDown } from \"react-feather\";\r\n//import classnames from \"classnames\";\r\nimport \"../../../assets/scss/plugins/tables/_agGridStyleOverride.scss\";\r\nimport \"../../../assets/scss/pages/users.scss\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Breadcrumbs from \"../../../components/@vuexy/breadCrumbs/BreadCrumb\";\r\nimport axiosConfig from \"../../../axiosConfig\";\r\n\r\nclass PayoutList extends React.Component {\r\n  state = {\r\n    rowData: [],\r\n    paginationPageSize: 20,\r\n    currenPageSize: \"\",\r\n    getPageSize: \"\",\r\n    defaultColDef: {\r\n      sortable: true,\r\n      editable: true,\r\n      resizable: true,\r\n      suppressMenu: true,\r\n    },\r\n    columnDefs: [\r\n      {\r\n        headerName: \"S.No\",\r\n        valueGetter: \"node.rowIndex + 1\",\r\n        field: \"node.rowIndex + 1\",\r\n        width: 80,\r\n        filter: true,\r\n        // checkboxSelection: true,\r\n        // headerCheckboxSelectionFilteredOnly: true,\r\n        // headerCheckboxSelection: true,\r\n      },\r\n      {\r\n        headerName: \"Action\",\r\n        field: \"sortorder\",\r\n        width: 120,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"actions cursor-pointer\">\r\n              {/* <Route\r\n                render={({ history }) => (\r\n                  <Eye\r\n                    className=\"mr-50\"\r\n                    size=\"25px\"\r\n                    color=\"green\"\r\n                    onClick={() =>\r\n                      history.push(\r\n                        `/app/userride/viewUserRide/${params.data._id}`\r\n                      )\r\n                    }\r\n                  />\r\n                )}\r\n              /> */}\r\n              <Route\r\n                render={({ history }) => (\r\n                  <Edit\r\n                    className=\"mr-50\"\r\n                    size=\"25px\"\r\n                    color=\"blue\"\r\n                    onClick={() =>\r\n                      history.push(\r\n                        `/app/report/editpayout/${params?.data?._id}`\r\n                      )\r\n                    }\r\n                  />\r\n                )}\r\n              />\r\n              <Trash2\r\n                className=\"mr-50\"\r\n                size=\"25px\"\r\n                color=\"red\"\r\n                onClick={() => {\r\n                  let selectedData = this.gridApi.getSelectedRows();\r\n                  this.runthisfunction(params.data._id);\r\n                  this.gridApi.updateRowData({ remove: selectedData });\r\n                }}\r\n              />\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        headerName: \"Transaction ID\",\r\n        field: \"transactionId\",\r\n        filter: true,\r\n        width: 160,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div>\r\n              <span>{params.data?.transactionId}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        headerName: \"Status\",\r\n        field: \"status\",\r\n        filter: true,\r\n        width: 160,\r\n        cellRendererFramework: (params) => {\r\n          console.log(params.data);\r\n          return (\r\n            <div>\r\n              {params.data?.status === \"Pending\" ? (\r\n                <>\r\n                  <Button style={{ color: \"black\" }} color=\"warning\" size=\"sm\">\r\n                    Pending\r\n                  </Button>\r\n                </>\r\n              ) : (\r\n                <>\r\n                  {params.data.status === \"Approved\" ? (\r\n                    <>\r\n                      <Button color=\"success\" size=\"sm\">\r\n                        <b>Approved</b>\r\n                      </Button>\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      <Button color=\"danger\" size=\"sm\">\r\n                        <b>Cancel</b>\r\n                      </Button>\r\n                    </>\r\n                  )}\r\n                </>\r\n              )}\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        headerName: \" Requested Amount\",\r\n        field: \"payout_amt\",\r\n        filter: true,\r\n        width: 180,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div>\r\n              <span>{params.data?.reqsted_amt}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n\r\n      {\r\n        headerName: \"Total Earning\",\r\n        field: \"reason\",\r\n        filter: true,\r\n        width: 180,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div>\r\n              <span>{params.data?.astroId?.ownamount}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        headerName: \"Doctor Name\",\r\n        field: \"fullname\",\r\n        filter: true,\r\n        width: 180,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"d-flex align-items-center cursor-pointer\">\r\n              <span>{params.data?.astroId?.fullname}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n\r\n      {\r\n        headerName: \"Mobile No.\",\r\n        field: \"mobile\",\r\n        filter: true,\r\n        width: 160,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"d-flex align-items-center cursor-pointer\">\r\n              <span>{params.data?.astroId?.mobile}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n\r\n      {\r\n        headerName: \"Requested Date\",\r\n        field: \"reason\",\r\n        filter: true,\r\n        width: 160,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div>\r\n              <span>{params.data?.updatedAt.split(\"T\")[0]}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n    ],\r\n  };\r\n  runthisfunction = (id) => {\r\n    axiosConfig\r\n      .get(`/admin/dltPayoutlist/${id}`)\r\n      .then((res) => {\r\n        console.log(res);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n  async componentDidMount() {\r\n    // let { id } = this.props.match.params;\r\n\r\n    await axiosConfig.get(`/user/PayoutList`).then((response) => {\r\n      let rowData = response.data.data;\r\n      console.log(rowData);\r\n      this.setState({ rowData });\r\n    });\r\n  }\r\n\r\n  onGridReady = (params) => {\r\n    this.gridApi = params.api;\r\n    this.gridColumnApi = params.columnApi;\r\n    this.setState({\r\n      currenPageSize: this.gridApi.paginationGetCurrentPage() + 1,\r\n      getPageSize: this.gridApi.paginationGetPageSize(),\r\n      totalPages: this.gridApi.paginationGetTotalPages(),\r\n    });\r\n  };\r\n  updateSearchQuery = (val) => {\r\n    this.gridApi.setQuickFilter(val);\r\n  };\r\n  filterSize = (val) => {\r\n    if (this.gridApi) {\r\n      this.gridApi.paginationSetPageSize(Number(val));\r\n      this.setState({\r\n        currenPageSize: val,\r\n        getPageSize: val,\r\n      });\r\n    }\r\n  };\r\n  render() {\r\n    const { rowData, columnDefs, defaultColDef } = this.state;\r\n    return (\r\n      console.log(rowData),\r\n      (\r\n        <div>\r\n          <Breadcrumbs\r\n            breadCrumbTitle=\"Payout List \"\r\n            breadCrumbParent=\"Home\"\r\n            breadCrumbActive=\"Payout List \"\r\n          />\r\n\r\n          <Row className=\"app-user-list\">\r\n            <Col sm=\"12\"></Col>\r\n            <Col sm=\"12\">\r\n              <Card>\r\n                <Row className=\"m-2\">\r\n                  <Col>\r\n                    <h1 sm=\"6\" className=\"float-left\">\r\n                      Payout List\r\n                    </h1>\r\n                  </Col>\r\n                  {/* <Col>\r\n                    <Route\r\n                      render={({ history }) => (\r\n                        <Button\r\n                          className=\" btn btn-success float-right\"\r\n                          onClick={() => history.push(\"/app/report/payoutadd\")}\r\n                        >\r\n                          Add\r\n                        </Button>\r\n                      )}\r\n                    />\r\n                  </Col> */}\r\n                </Row>\r\n                <CardBody>\r\n                  {this.state.rowData === null ? null : (\r\n                    <div className=\"ag-theme-material w-100 my-2 ag-grid-table\">\r\n                      <div className=\"d-flex flex-wrap justify-content-between align-items-center\">\r\n                        <div className=\"mb-1\">\r\n                          <UncontrolledDropdown className=\"p-1 ag-dropdown\">\r\n                            <DropdownToggle tag=\"div\">\r\n                              {this.gridApi\r\n                                ? this.state.currenPageSize\r\n                                : \"\" * this.state.getPageSize -\r\n                                  (this.state.getPageSize - 1)}{\" \"}\r\n                              -{\" \"}\r\n                              {this.state.rowData.length -\r\n                                this.state.currenPageSize *\r\n                                  this.state.getPageSize >\r\n                              0\r\n                                ? this.state.currenPageSize *\r\n                                  this.state.getPageSize\r\n                                : this.state.rowData.length}{\" \"}\r\n                              of {this.state.rowData.length}\r\n                              <ChevronDown className=\"ml-50\" size={15} />\r\n                            </DropdownToggle>\r\n                            <DropdownMenu right>\r\n                              <DropdownItem\r\n                                tag=\"div\"\r\n                                onClick={() => this.filterSize(20)}\r\n                              >\r\n                                20\r\n                              </DropdownItem>\r\n                              <DropdownItem\r\n                                tag=\"div\"\r\n                                onClick={() => this.filterSize(50)}\r\n                              >\r\n                                50\r\n                              </DropdownItem>\r\n                              <DropdownItem\r\n                                tag=\"div\"\r\n                                onClick={() => this.filterSize(100)}\r\n                              >\r\n                                100\r\n                              </DropdownItem>\r\n                              <DropdownItem\r\n                                tag=\"div\"\r\n                                onClick={() => this.filterSize(134)}\r\n                              >\r\n                                134\r\n                              </DropdownItem>\r\n                            </DropdownMenu>\r\n                          </UncontrolledDropdown>\r\n                        </div>\r\n                        <div className=\"d-flex flex-wrap justify-content-between mb-1\">\r\n                          <div className=\"table-input mr-1\">\r\n                            <Input\r\n                              placeholder=\"search...\"\r\n                              onChange={(e) =>\r\n                                this.updateSearchQuery(e.target.value)\r\n                              }\r\n                              value={this.state.value}\r\n                            />\r\n                          </div>\r\n                          <div className=\"export-btn\">\r\n                            <Button.Ripple\r\n                              color=\"primary\"\r\n                              onClick={() => this.gridApi.exportDataAsCsv()}\r\n                            >\r\n                              Export as CSV\r\n                            </Button.Ripple>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <ContextLayout.Consumer>\r\n                        {(context) => (\r\n                          <AgGridReact\r\n                            gridOptions={{}}\r\n                            rowSelection=\"multiple\"\r\n                            defaultColDef={defaultColDef}\r\n                            columnDefs={columnDefs}\r\n                            rowData={rowData}\r\n                            onGridReady={this.onGridReady}\r\n                            colResizeDefault={\"shift\"}\r\n                            animateRows={true}\r\n                            floatingFilter={false}\r\n                            pagination={true}\r\n                            paginationPageSize={this.state.paginationPageSize}\r\n                            pivotPanelShow=\"always\"\r\n                            enableRtl={context.state.direction === \"rtl\"}\r\n                          />\r\n                        )}\r\n                      </ContextLayout.Consumer>\r\n                    </div>\r\n                  )}\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      )\r\n    );\r\n  }\r\n}\r\nexport default PayoutList;\r\n"],"sourceRoot":""}