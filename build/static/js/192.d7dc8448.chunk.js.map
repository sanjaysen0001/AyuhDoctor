{"version":3,"sources":["views/apps/productmanager/category/Dr.prescription.js"],"names":["i","PrescrCategoryList","state","rowData","paginationPageSize","currenPageSize","getPageSize","defaultColDef","sortable","editable","resizable","suppressMenu","columnDefs","headerName","valueGetter","field","width","filter","setColumnVisible","cellRendererFramework","params","className","data","img","map","src","alt","height","name","render","history","size","color","onClick","push","_id","selectedData","gridApi","getSelectedRows","runthisfunction","updateRowData","remove","onGridReady","api","gridColumnApi","columnApi","setState","paginationGetCurrentPage","paginationGetPageSize","totalPages","paginationGetTotalPages","updateSearchQuery","val","setQuickFilter","filterSize","paginationSetPageSize","Number","axiosConfig","get","then","response","console","log","id","error","this","breadCrumbTitle","breadCrumbParent","sm","tag","length","right","placeholder","onChange","e","target","value","Ripple","exportDataAsCsv","Consumer","context","gridOptions","rowSelection","colResizeDefault","animateRows","floatingFilter","pagination","pivotPanelShow","enableRtl","direction","React","Component"],"mappings":"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","file":"static/js/192.d7dc8448.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    Input,\r\n    Row,\r\n    Col,\r\n    Button,\r\n    UncontrolledDropdown,\r\n    DropdownMenu,\r\n    DropdownItem,\r\n    DropdownToggle,\r\n} from \"reactstrap\";\r\nimport axiosConfig from \"../../../../axiosConfig\";\r\nimport axios from \"axios\";\r\nimport { ContextLayout } from \"../../../../utility/context/Layout\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\n\r\nimport { Eye, Edit, Trash2, ChevronDown } from \"react-feather\";\r\n//import classnames from \"classnames\";\r\nimport \"../../../../assets/scss/plugins/tables/_agGridStyleOverride.scss\";\r\nimport \"../../../../assets/scss/pages/users.scss\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Breadcrumbs from \"../../../../components/@vuexy/breadCrumbs/BreadCrumb\";\r\nimport ReactHtmlParser from \"react-html-parser\";\r\nclass PrescrCategoryList extends React.Component {\r\n    state = {\r\n        rowData: [],\r\n        paginationPageSize: 20,\r\n        currenPageSize: \"\",\r\n        getPageSize: \"\",\r\n        defaultColDef: {\r\n            sortable: true,\r\n            editable: true,\r\n            resizable: true,\r\n            suppressMenu: true,\r\n        },\r\n        columnDefs: [\r\n            {\r\n                headerName: \"S.No\",\r\n                valueGetter: \"node.rowIndex + 1\",\r\n                field: \"node.rowIndex + 1\",\r\n                width: 100,\r\n                filter: true,\r\n                // checkboxSelection: true,\r\n                // headerCheckboxSelectionFilteredOnly: true,\r\n                // headerCheckboxSelection: true,\r\n            },\r\n\r\n\r\n              {\r\n                headerName: \"Image\",\r\n                field: \"img\",\r\n                filter: false,\r\n                width: 200,\r\n                setColumnVisible: false,\r\n                cellRendererFramework: (params) => {\r\n                  return (\r\n                    <div className=\"d-flex align-items-center cursor-pointer\">\r\n                      {params.data.img.map((i) => (\r\n                        <img\r\n                          className=\" rounded-circle  mr-3\"\r\n                          src={i}\r\n                          alt=\"user avatar\"\r\n                          height=\"40\"\r\n                          width=\"40\"\r\n                        />\r\n                      ))}\r\n                    </div>\r\n                  );\r\n                },\r\n              },\r\n\r\n              {\r\n                headerName: \"Doctor Name\",\r\n                field: \"name\",\r\n                filter: true,\r\n                width: 200,\r\n                cellRendererFramework: (params) => {\r\n                    return (\r\n                        <div>\r\n                            <span>{params.data.name}</span>\r\n                        </div>\r\n                    );\r\n                },\r\n            },\r\n\r\n            {\r\n                headerName: \"Patient Name\",\r\n                field: \"name\",\r\n                filter: true,\r\n                width: 200,\r\n                cellRendererFramework: (params) => {\r\n                    return (\r\n                        <div>\r\n                            <span>{params.data.name}</span>\r\n                        </div>\r\n                    );\r\n                },\r\n            },\r\n            {\r\n                headerName: \"Phone No.\",\r\n                field: \"name\",\r\n                filter: true,\r\n                width: 200,\r\n                cellRendererFramework: (params) => {\r\n                    return (\r\n                        <div>\r\n                            <span>{params.data.name}</span>\r\n                        </div>\r\n                    );\r\n                },\r\n            },\r\n\r\n            {\r\n                headerName: \"Prescription\",\r\n                field: \"desc\",\r\n                filter: true,\r\n                width: 150,\r\n                cellRendererFramework: (params) => {\r\n                    return (\r\n                        // <div className=\"d-flex align-items-center cursor-pointer\">\r\n                        //     <span>{ReactHtmlParser(params.data.desc)}</span>\r\n                        <div className=\"actions cursor-pointer\">\r\n                        <Route\r\n                            render={({ history }) => (\r\n                                <Eye\r\n                                    className=\"mr-50\"\r\n                                    size=\"25px\"\r\n                                    color=\"green\"\r\n                                    onClick={() =>\r\n                                        history.push(\r\n                                            `/app/productmanager/category/viewCategory/${params.data._id}`\r\n                                        )\r\n                                    }\r\n                                />\r\n                            )}\r\n                        />\r\n                        </div>\r\n                    );\r\n                },\r\n            },\r\n\r\n            //   {\r\n            //     headerName: \"Status\",\r\n            //     field: \"status\",\r\n            //     filter: true,\r\n            //     width: 150,\r\n            //     cellRendererFramework: (params) => {\r\n            //       return params.value === \"Active\" ? (\r\n            //         <div className=\"badge badge-pill badge-success\">\r\n            //           {params.data.status}\r\n            //         </div>\r\n            //       ) : params.value === \"Deactive\" ? (\r\n            //         <div className=\"badge badge-pill badge-warning\">\r\n            //           {params.data.status}\r\n            //         </div>\r\n            //       ) : null;\r\n            //     },\r\n            //   },\r\n\r\n            {\r\n                headerName: \"Action\",\r\n                field: \"sortorder\",\r\n                width: 200,\r\n                cellRendererFramework: (params) => {\r\n                    return (\r\n                        <div className=\"actions cursor-pointer\">\r\n                            {/* <Route\r\n                                render={({ history }) => (\r\n                                    <Eye\r\n                                        className=\"mr-50\"\r\n                                        size=\"25px\"\r\n                                        color=\"green\"\r\n                                        onClick={() =>\r\n                                            history.push(\r\n                                                `/app/productmanager/category/viewCategory/${params.data._id}`\r\n                                            )\r\n                                        }\r\n                                    />\r\n                                )}\r\n                            /> */}\r\n                            <Route\r\n                                render={({ history }) => (\r\n                                    <Edit\r\n                                        className=\"mr-50\"\r\n                                        size=\"25px\"\r\n                                        color=\"blue\"\r\n                                        onClick={() =>\r\n                                            history.push(\r\n                                                `/app/productmanager/category/editCategory/${params.data._id}`\r\n                                            )\r\n                                        }\r\n                                    />\r\n                                )}\r\n                            />\r\n                            <Trash2\r\n                                className=\"mr-50\"\r\n                                size=\"25px\"\r\n                                color=\"red\"\r\n                                onClick={() => {\r\n                                    let selectedData = this.gridApi.getSelectedRows();\r\n                                    this.runthisfunction(params.data._id);\r\n                                    this.gridApi.updateRowData({ remove: selectedData });\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    );\r\n                },\r\n            },\r\n        ],\r\n    };\r\n\r\n    async componentDidMount() {\r\n        // let { id } = this.props.match.params;\r\n\r\n        await axiosConfig.get(`/admin/getproductcalegory`).then((response) => {\r\n            let rowData = response.data.data;\r\n            console.log(rowData);\r\n            this.setState({ rowData });\r\n        });\r\n    }\r\n\r\n    async runthisfunction(id) {\r\n        console.log(id);\r\n        await axiosConfig.get(`/admin/delpdctCategory/${id}`).then(\r\n            (response) => {\r\n                console.log(response);\r\n            },\r\n            (error) => {\r\n                console.log(error);\r\n            }\r\n        );\r\n    }\r\n    onGridReady = (params) => {\r\n        this.gridApi = params.api;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.setState({\r\n            currenPageSize: this.gridApi.paginationGetCurrentPage() + 1,\r\n            getPageSize: this.gridApi.paginationGetPageSize(),\r\n            totalPages: this.gridApi.paginationGetTotalPages(),\r\n        });\r\n    };\r\n    updateSearchQuery = (val) => {\r\n        this.gridApi.setQuickFilter(val);\r\n    };\r\n    filterSize = (val) => {\r\n        if (this.gridApi) {\r\n            this.gridApi.paginationSetPageSize(Number(val));\r\n            this.setState({\r\n                currenPageSize: val,\r\n                getPageSize: val,\r\n            });\r\n        }\r\n    };\r\n    render() {\r\n        const { rowData, columnDefs, defaultColDef } = this.state;\r\n        return (\r\n            console.log(rowData),\r\n            (\r\n                <div>\r\n                    <Breadcrumbs\r\n                        breadCrumbTitle=\"App Management\"\r\n                        breadCrumbParent=\"Prescription List\"\r\n                    // breadCrumbActive=\"App Management\"\r\n                    />\r\n\r\n                    <Row className=\"app-user-list\">\r\n                        <Col sm=\"12\"></Col>\r\n                        <Col sm=\"12\">\r\n                            <Card>\r\n                                <Row className=\"m-2\">\r\n                                    <Col>\r\n                                        <h1 sm=\"6\" className=\"float-left\">\r\n                                            Dr. Prescription List\r\n                                        </h1>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <Route\r\n                                            render={({ history }) => (\r\n                                                <Button\r\n                                                    className=\" btn btn-success float-right\"\r\n                                                    onClick={() =>\r\n                                                        history.push(\r\n                                                            \"/app/productmanager/category/addCategory\"\r\n                                                        )\r\n                                                    }\r\n                                                >\r\n                                                    Prescription\r\n                                                </Button>\r\n                                            )}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                                <CardBody>\r\n                                    {this.state.rowData === null ? null : (\r\n                                        <div className=\"ag-theme-material w-100 my-2 ag-grid-table\">\r\n                                            <div className=\"d-flex flex-wrap justify-content-between align-items-center\">\r\n                                                <div className=\"mb-1\">\r\n                                                    <UncontrolledDropdown className=\"p-1 ag-dropdown\">\r\n                                                        <DropdownToggle tag=\"div\">\r\n                                                            {this.gridApi\r\n                                                                ? this.state.currenPageSize\r\n                                                                : \"\" * this.state.getPageSize -\r\n                                                                (this.state.getPageSize - 1)}{\" \"}\r\n                                                            -{\" \"}\r\n                                                            {this.state.rowData.length -\r\n                                                                this.state.currenPageSize *\r\n                                                                this.state.getPageSize >\r\n                                                                0\r\n                                                                ? this.state.currenPageSize *\r\n                                                                this.state.getPageSize\r\n                                                                : this.state.rowData.length}{\" \"}\r\n                                                            of {this.state.rowData.length}\r\n                                                            <ChevronDown className=\"ml-50\" size={15} />\r\n                                                        </DropdownToggle>\r\n                                                        <DropdownMenu right>\r\n                                                            <DropdownItem\r\n                                                                tag=\"div\"\r\n                                                                onClick={() => this.filterSize(20)}\r\n                                                            >\r\n                                                                20\r\n                                                            </DropdownItem>\r\n                                                            <DropdownItem\r\n                                                                tag=\"div\"\r\n                                                                onClick={() => this.filterSize(50)}\r\n                                                            >\r\n                                                                50\r\n                                                            </DropdownItem>\r\n                                                            <DropdownItem\r\n                                                                tag=\"div\"\r\n                                                                onClick={() => this.filterSize(100)}\r\n                                                            >\r\n                                                                100\r\n                                                            </DropdownItem>\r\n                                                            <DropdownItem\r\n                                                                tag=\"div\"\r\n                                                                onClick={() => this.filterSize(134)}\r\n                                                            >\r\n                                                                134\r\n                                                            </DropdownItem>\r\n                                                        </DropdownMenu>\r\n                                                    </UncontrolledDropdown>\r\n                                                </div>\r\n                                                <div className=\"d-flex flex-wrap justify-content-between mb-1\">\r\n                                                    <div className=\"table-input mr-1\">\r\n                                                        <Input\r\n                                                            placeholder=\"search...\"\r\n                                                            onChange={(e) =>\r\n                                                                this.updateSearchQuery(e.target.value)\r\n                                                            }\r\n                                                            value={this.state.value}\r\n                                                        />\r\n                                                    </div>\r\n                                                    <div className=\"export-btn\">\r\n                                                        <Button.Ripple\r\n                                                            color=\"primary\"\r\n                                                            onClick={() => this.gridApi.exportDataAsCsv()}\r\n                                                        >\r\n                                                            Export as CSV\r\n                                                        </Button.Ripple>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                            <ContextLayout.Consumer>\r\n                                                {(context) => (\r\n                                                    <AgGridReact\r\n                                                        gridOptions={{}}\r\n                                                        rowSelection=\"multiple\"\r\n                                                        defaultColDef={defaultColDef}\r\n                                                        columnDefs={columnDefs}\r\n                                                        rowData={rowData}\r\n                                                        onGridReady={this.onGridReady}\r\n                                                        colResizeDefault={\"shift\"}\r\n                                                        animateRows={true}\r\n                                                        floatingFilter={false}\r\n                                                        pagination={true}\r\n                                                        paginationPageSize={this.state.paginationPageSize}\r\n                                                        pivotPanelShow=\"always\"\r\n                                                        enableRtl={context.state.direction === \"rtl\"}\r\n                                                    />\r\n                                                )}\r\n                                            </ContextLayout.Consumer>\r\n                                        </div>\r\n                                    )}\r\n                                </CardBody>\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            )\r\n        );\r\n    }\r\n}\r\nexport default PrescrCategoryList;\r\n"],"sourceRoot":""}