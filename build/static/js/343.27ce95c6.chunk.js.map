{"version":3,"sources":["views/apps/setting/EnquiryForm.js"],"names":["EnquiryForm","state","rowData","paginationPageSize","currenPageSize","getPageSize","defaultColDef","sortable","editable","resizable","suppressMenu","columnDefs","headerName","field","width","filter","checkboxSelection","headerCheckboxSelectionFilteredOnly","headerCheckboxSelection","pinned","window","innerWidth","cellRendererFramework","params","className","size","color","onClick","selectedData","gridApi","getSelectedRows","runthisfunction","data","_id","updateRowData","remove","onGridReady","api","gridColumnApi","columnApi","setState","paginationGetCurrentPage","paginationGetPageSize","totalPages","paginationGetTotalPages","updateSearchQuery","val","setQuickFilter","filterSize","paginationSetPageSize","Number","axios","get","then","response","JSON","stringify","this","Fragment","breadCrumbTitle","tag","length","right","placeholder","onChange","e","target","value","Ripple","exportDataAsCsv","Consumer","context","gridOptions","rowSelection","colResizeDefault","animateRows","floatingFilter","pagination","pivotPanelShow","enableRtl","direction","React","Component"],"mappings":"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","file":"static/js/343.27ce95c6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Input,\r\n  Button,\r\n  UncontrolledDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n} from \"reactstrap\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport { ContextLayout } from \"../../../utility/context/Layout\";\r\nimport { ChevronDown, Trash2, Eye, Edit } from \"react-feather\";\r\nimport axios from \"axios\";\r\nimport \"../../../assets/scss/plugins/tables/_agGridStyleOverride.scss\";\r\nimport Breadcrumbs from \"../../../components/@vuexy/breadCrumbs/BreadCrumb\";\r\n// import { history } from \"../../../history\";\r\n\r\nclass EnquiryForm extends React.Component {\r\n  state = {\r\n    rowData: null,\r\n    paginationPageSize: 20,\r\n    currenPageSize: \"\",\r\n    getPageSize: \"\",\r\n    defaultColDef: {\r\n      sortable: true,\r\n      editable: true,\r\n      resizable: true,\r\n      suppressMenu: true,\r\n    },\r\n    columnDefs: [\r\n      {\r\n        headerName: \"Mobile No.\",\r\n        field: \"Mobile\",\r\n        width: 175,\r\n        filter: false,\r\n        checkboxSelection: false,\r\n        headerCheckboxSelectionFilteredOnly: false,\r\n        headerCheckboxSelection: false,\r\n      },\r\n      {\r\n        headerName: \"Name\",\r\n        field: \"firstname\",\r\n        filter: false,\r\n        width: 250,\r\n        pinned: window.innerWidth > 992 ? \"left\" : false,\r\n      },\r\n      {\r\n        headerName: \"Email\",\r\n        field: \"email\",\r\n        filter: false,\r\n        width: 250,\r\n        pinned: window.innerWidth > 992 ? \"left\" : false,\r\n      },\r\n      {\r\n        headerName: \"Customer Enquiry\",\r\n        field: \"Customer\",\r\n        filter: false,\r\n        width: 250,\r\n      },\r\n      // {\r\n      //   headerName: \"City\",\r\n      //   field: \"city\",\r\n      //   filter: false,\r\n      //   width: 150,\r\n      // },\r\n      // {\r\n      //   headerName: \"Country\",\r\n      //   field: \"country\",\r\n      //   filter: false,\r\n      //   width: 150,\r\n      // },\r\n      // {\r\n      //   headerName: \"State\",\r\n      //   field: \"state\",\r\n      //   filter: false,\r\n      //   width: 125,\r\n      // },\r\n      // {\r\n      //   headerName: \"Zip\",\r\n      //   field: \"zip\",\r\n      //   filter: \"agNumberColumnFilter\",\r\n      //   width: 140,\r\n      // },\r\n      // {\r\n      //   headerName: \"Mobille No.\",\r\n      //   field: \"number\",\r\n      //   filter: \"agNumberColumnFilter\",\r\n      //   width: 140,\r\n      // },\r\n      // {\r\n      //   headerName: \"Subscription Plan Name\",\r\n      //   field: \"Subscription Plan Name\",\r\n      //   filter: \"agNumberColumnFilter\",\r\n      //   width: 140,\r\n      // },\r\n      {\r\n        headerName: \"Actions\",\r\n        field: \"sortorder\",\r\n        width: 150,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"actions cursor-pointer\">\r\n              <Eye\r\n                className=\"mr-50\"\r\n                size=\"25px\"\r\n                color=\"green\"\r\n                // onClick={() =>\r\n                //   history.push(\"/app/shiftManagement/shiftDealerTable\")\r\n                // }\r\n              />\r\n              <Edit\r\n                className=\"mr-50\"\r\n                size=\"25px\"\r\n                color=\"blue\"\r\n                // onClick={() => history.push(\"/app/slider/editSlider/${params.data._id}\")}\r\n              />\r\n              <Trash2\r\n                className=\"mr-50\"\r\n                size=\"25px\"\r\n                color=\"red\"\r\n                onClick={() => {\r\n                  let selectedData = this.gridApi.getSelectedRows();\r\n                  this.runthisfunction(params.data._id);\r\n                  this.gridApi.updateRowData({ remove: selectedData });\r\n                }}\r\n              />\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n    ],\r\n  };\r\n\r\n  componentDidMount() {\r\n    axios.get(\"/api/aggrid/data\").then((response) => {\r\n      let rowData = response.data.data;\r\n      JSON.stringify(rowData);\r\n      this.setState({ rowData });\r\n    });\r\n  }\r\n\r\n  onGridReady = (params) => {\r\n    this.gridApi = params.api;\r\n    this.gridColumnApi = params.columnApi;\r\n    this.setState({\r\n      currenPageSize: this.gridApi.paginationGetCurrentPage() + 1,\r\n      getPageSize: this.gridApi.paginationGetPageSize(),\r\n      totalPages: this.gridApi.paginationGetTotalPages(),\r\n    });\r\n  };\r\n\r\n  updateSearchQuery = (val) => {\r\n    this.gridApi.setQuickFilter(val);\r\n  };\r\n\r\n  filterSize = (val) => {\r\n    if (this.gridApi) {\r\n      this.gridApi.paginationSetPageSize(Number(val));\r\n      this.setState({\r\n        currenPageSize: val,\r\n        getPageSize: val,\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { rowData, columnDefs, defaultColDef } = this.state;\r\n    return (\r\n      <React.Fragment>\r\n        <Breadcrumbs\r\n          breadCrumbTitle=\"Help Desk\"\r\n          // breadCrumbParent=\"Forms & Tables\"\r\n          // breadCrumbActive=\"Shift Management\"\r\n        />\r\n        <Card className=\"overflow-hidden agGrid-card\">\r\n          <CardBody className=\"py-0\">\r\n            {this.state.rowData === null ? null : (\r\n              <div className=\"ag-theme-material w-100 my-2 ag-grid-table\">\r\n                <div className=\"d-flex flex-wrap justify-content-between align-items-center\">\r\n                  <div className=\"mb-1\">\r\n                    <UncontrolledDropdown className=\"p-1 ag-dropdown\">\r\n                      <DropdownToggle tag=\"div\">\r\n                        {this.gridApi\r\n                          ? this.state.currenPageSize\r\n                          : \"\" * this.state.getPageSize -\r\n                            (this.state.getPageSize - 1)}{\" \"}\r\n                        -{\" \"}\r\n                        {this.state.rowData.length -\r\n                          this.state.currenPageSize * this.state.getPageSize >\r\n                        0\r\n                          ? this.state.currenPageSize * this.state.getPageSize\r\n                          : this.state.rowData.length}{\" \"}\r\n                        of {this.state.rowData.length}\r\n                        <ChevronDown className=\"ml-50\" size={15} />\r\n                      </DropdownToggle>\r\n                      <DropdownMenu right>\r\n                        <DropdownItem\r\n                          tag=\"div\"\r\n                          onClick={() => this.filterSize(20)}\r\n                        >\r\n                          20\r\n                        </DropdownItem>\r\n                        <DropdownItem\r\n                          tag=\"div\"\r\n                          onClick={() => this.filterSize(50)}\r\n                        >\r\n                          50\r\n                        </DropdownItem>\r\n                        <DropdownItem\r\n                          tag=\"div\"\r\n                          onClick={() => this.filterSize(100)}\r\n                        >\r\n                          100\r\n                        </DropdownItem>\r\n                        <DropdownItem\r\n                          tag=\"div\"\r\n                          onClick={() => this.filterSize(134)}\r\n                        >\r\n                          134\r\n                        </DropdownItem>\r\n                      </DropdownMenu>\r\n                    </UncontrolledDropdown>\r\n                  </div>\r\n                  <div className=\"d-flex flex-wrap justify-content-between mb-1\">\r\n                    <div className=\"table-input mr-1\">\r\n                      <Input\r\n                        placeholder=\"search...\"\r\n                        onChange={(e) => this.updateSearchQuery(e.target.value)}\r\n                        value={this.state.value}\r\n                      />\r\n                    </div>\r\n                    <div className=\"export-btn\">\r\n                      <Button.Ripple\r\n                        color=\"primary\"\r\n                        onClick={() => this.gridApi.exportDataAsCsv()}\r\n                      >\r\n                        Export as CSV\r\n                      </Button.Ripple>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <ContextLayout.Consumer>\r\n                  {(context) => (\r\n                    <AgGridReact\r\n                      gridOptions={{}}\r\n                      rowSelection=\"multiple\"\r\n                      defaultColDef={defaultColDef}\r\n                      columnDefs={columnDefs}\r\n                      rowData={rowData}\r\n                      onGridReady={this.onGridReady}\r\n                      colResizeDefault={\"shift\"}\r\n                      animateRows={true}\r\n                      floatingFilter={true}\r\n                      pagination={true}\r\n                      paginationPageSize={this.state.paginationPageSize}\r\n                      pivotPanelShow=\"always\"\r\n                      enableRtl={context.state.direction === \"rtl\"}\r\n                    />\r\n                  )}\r\n                </ContextLayout.Consumer>\r\n              </div>\r\n            )}\r\n          </CardBody>\r\n        </Card>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nexport default EnquiryForm;\r\n"],"sourceRoot":""}